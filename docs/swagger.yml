openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: '/api'
info:
  version: "1.0.0"
  title: Scheduleapp API
  description: >-
    スケジュール管理ツールのAPIです。
security:
  - application:
      - read
      - write
paths:
  '/schedules':
    get:
      description: 予定一覧を取得する。
      tags:
        - Schedule
      parameters:
        - name: current_state
          description: 現在の申請書の状態（"applied","rejected","fix_required","permitted","fully_paid")
          required: false
          in: query
          schema:
            type: string
        - name: instrument
          description: 
          required: false
          in: query
          schema:
            type: integer
        - name: groupe
          description: 誰が申請したか
          required: false
          in: query
          schema:
            type: string
        - name: type
          description: どのタイプか
          in: query
          required: false
          schema:
            type: string
        - name: since
          description: いつからの予定
          required: false
          in: query
          schema:
            type: string
            format: date
        - name: until
          description: いつまでの予定か
          required: false
          in: query
          schema:
            type: string
            format: date
      responses:
        "200":
          description: 取得できた。返す。該当するものがなくても空配列を返す。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    title:
                      type: string
                      example: "冬コミの交通費です"
                    created_at:
                      type: string
                      format: date-time
                    aplicant:
                      $ref: "#/components/schemas/User"
                    current_state:
                      type: string
                      example: "fix-requied"
                    ammount:
                      type: integer
                      example: 1200
        "400":
            description: リクエストがおかしい。
    post:
      description: 申請書を新規作成する。
      tags:
        - Applications
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PostApplication"
      responses:
        "201":
          description: 作成した。作成した先を返す。
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: "申請書のレコードid"
                  application_id:
                    type: integer
                    example: "同一申請書ごとのid"
                  created_at:
                    type: string
                    format: "date-time"
                    example: "2019/07/28 22:00:00"
                  current_state:
                    type: string
                    example: "rejected"
                  application: 
                    $ref: "#/components/schemas/Application"

        "400":
          description: リクエストに形式上または内容の不備がある。例えばtitleが空欄である、amountが負である,指定されたpaid_to_idに該当するClientが存在しないなど。内容に不備がある場合には、不備があるkeyを配列にして返す。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "ammout"
  "/applications/{applicationId}":
    parameters:
    - name: applicationId
      in: path
      required: true
      schema:
        type: integer
    get:
      description: 指定した申請書の詳細を取得する。(コメントは作成日時を返す)
      tags:
        - Applications
      responses:
        "200":
          description: あったら返す。
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: "申請書のレコードid"
                  application_id:
                    type: integer
                    example: "同一申請書ごとのid"
                  created_at:
                    type: string
                    format: "date-time"
                    example: "2019/07/28 22:00:00"
                  current_state:
                    type: string
                    example: "rejected"
                  application: 
                    $ref: "#/components/schemas/Application"
                  comments_logs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Comment"
                  state_logs:
                    type: array
                    items:
                      $ref: "#/components/schemas/State"
                  paid_logs:
                    type: array
                    items:
                      $ref: "#/components/schemas/Paid"
                  application_logs:
                    type: array
                    items:
                      $ref: "#/components/schemas/ApplicationLog"
        "400":
          description: リクエストがおかしい。
        "404":
          description: 指定されたApplicationIdはない。
    patch:
      description: 指定したApplicationを修正する。(新しいレコードを作る）。修正できるのは申請書の作成者かadminで、かつstateが"applied"(申請済み)もしくは"fix_required"(要修正))のとき。
      tags:
        - Applications
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/PostApplication"
      responses:
        "200":
          description: 修正できた。返す。
          content:
            application/json:
             schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: "申請書のレコードid"
                  application_id:
                    type: integer
                    example: "同一申請書ごとのid"
                  updated_at:
                    type: string
                    format: "date-time"
                    example: "2019/07/28 22:00:00"
                  current_state:
                    type: string
                    example: "rejected"
                  application: 
                    $ref: "#/components/schemas/Application"
        "400":
          description: リクエストに形式上または内容の不備がある。例えばtitleが空欄である、amountが負である,指定されたpaid_to_idに該当するClientが存在しないなど。内容に不備がある場合には、不備があるkeyを配列にして返す。
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  example: "ammout"
        "403":
          description: 編集権限がない人による操作または編集できないstate
          content:
            application/json:
              schema:
                type: object
                properties:
                  is_user_permitted:
                    type: boolean
                    example: fales
                  current_state:
                    type: string
                    example: "rejected"
        "404":
          description: 指定された申請書はない。
  "/applications/{applicationId}/comment":
    post:
      description: 指定した申請書にコメントを新規作成する。
      tags:
        - Comments
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: "ここを修正してください。"
      responses:
        "201":
          description: OK
          content:
            application/json:
             schema:
                    $ref: "#/components/schemas/Comment"
        "400":
          description: リクエストに形式上または内容の不備がある。例えばコメント欄が空欄。
        "404":
          description: 指定されたコメントはない。
  "/comments/{commentId}":
    parameters:
    - name: commentId
      in: path
      required: true
      schema:
        type: integer
    put:
      description: コメントを変更する。
      tags:
        - Comments
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                comment:
                  type: string
                  example: "ここを修正してください。"
      responses:
        "200":
          description: OK
          content:
            application/json:
             schema:
                    $ref: "#/components/schemas/Comment"
        "400":
          description: リクエストに形式上または内容の不備がある。例えばコメント欄が空欄。
        "403":
          description: 編集権限がない人(コメント作成者以外)による操作。
        "404":
          description: 指定された申請書はない。
        
    delete:
      description: 指定したコメントを削除する。
      tags:
        - Comments
      responses:
        "204":
          description: 正常に取り消すことができました。
        "400":
          description: リクエストに形式上または内容の不備がある。例えばコメント欄が空欄。
        "403":
          description: 編集権限がない人(コメント作成者以外)による操作。
        "404":
          description: 指定されたコメントはない。
  "/applications/{applicationId}/states":
    put:
      description: 指定した申請書のstateを変更のみ（新規はpost /applications で)する。reasonについてはstateを「appliedからfix_required」「appliedからrejected」「permittedからapplied」にするとき必須。stateの行き来の定義は作成者は「fix_requiredからapplied（このときapplication更新も行なっているはず）」をでき、adminは「appliedからrejected」「appliedからrequired」「fix_requiredからapplied」「appliedからpermitted」「permittedからapplied（ただしすでに支払われている人がいた場合、この操作は不可)」の操作のみ可。ただし、「permittedからfully_paid」の操作はここでは行えない。
      tags:
        - States
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to_state:
                  type: string
                  example: "permitted"
                reason:
                  type: string
                  example: "良いですね。"
      responses:
        "200":
          description: OK
          content:
            application/json:
             schema:
              type: object
              properties:
                user:
                  $ref: "#/components/schemas/User"
                updated_at:
                  type: string
                  format: date-time
                current_state:
                  type: string
                  example: "permitted"
                past_state:
                  type: string
                  example: "rejected"
        "400":
          description: リクエストに形式上または内容の不備がある。または行き来できないstate。
          content:
            application/json:
              schema:
                type: object
                properties:
                  current_state:
                    type: string
                    example: "rejected"
                  to_state:
                    type: string
                    example: "fully_paid"
        "404":
          description: 指定された申請書はない。
  "/applications/{applicationId}/states/paid/{paidToId}":
    put:
      description: 指定した申請書、支払い対象者についての返金状態を変更する（paidがfalseからtrueへの変更のみ）。ただし操作できるのはadminかつstateが"permitted"の時のみ。db上では全員に返却されたときに「3(permitted)から4(fully_paid)」の操作を行う。
      tags:
        - States
      parameters:
        - name: applicationId
          in: path
          required: true
          schema:
            type: integer
        - name: paidToId
          in: path
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: OK
          content:
            application/json:
             schema:
              type: object
              properties:
                paid_by_user:
                  $ref: "#/components/schemas/User"
                paid_to_user:
                  $ref: "#/components/schemas/User"
                paid_at:
                  type: string
                  format: date-time
                to_state:
                    type: string
                    example: "fully_paid"
        "400":
          description: すでに返金済みのユーザー。
        "404":
          description: 指定された申請書または返金対象者はない。
  "/users":
    get:
      description: ユーザの一覧を返す
      tags:
        - Users
      responses:
        "200":
          description: 取得に成功した。返す
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      $ref: "#/components/schemas/User"
                    admin:
                      type: boolean
  "/users/me":
    get:
      tags:
        - Users
      description: 自分のユーザー情報を取得します
      responses:
        '200':
          description: 正常に取得できました。
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
  "/users/admin":
    get:
      description: adminユーザの一覧を返す。
      tags:
        - Users
      responses:
        "200":
          description: 取得に成功した。返す
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    user:
                      $ref: "#/components/schemas/User"
                    admin:
                      type: boolean
    put:
      description: adminユーザーを変更する。
      tags:
        - Users
      requestBody:
        required: true
        content:
            application/json:
              schema:
                  type: object
                  properties:
                    trap_id:
                      type: string
                      example: "nagatech"
                    to_admin:
                      type: boolean
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                  type: object
                  properties:
                    user:
                      $ref: "#/components/schemas/User"
                    current_admin:
                      type: boolean

        "400":
          description: リクエストに形式上または内容の不備がある。例えばadminの状態が変更前と同じだった時。
        "403":
          description: admin以外の人
        "404":
          description: adminを変更しようとした対象者は存在しない

components:
  schemas: 
    Application:
      type: object
      properties:
        aplicant:
          $ref: "#/components/schemas/User"
        type:
          type: string
          example: "Public"
        title:
          type: string
          example: "夏コミの交通費をお願いします。"
        remarks:
          type: string
          example: "〇〇駅から〇〇駅への移動"
        bought_at:
          type: string
          format: "date-time"
          example: "2019/07/28 22:00:00"
        ammount:
          type: integer   
          example: 1200
        paid_to_id:
          type: array
          items: 
            type: string
            example: "nagatech"
        image:
          type: array
          items: 
            type: string
            example: "画像の保管場所を表す何か"
    ApplicationLog:
      type: object
      properties:
        update_user:
          $ref: "#/components/schemas/User"
        type:
          type: string
          example: "Public"
        title:
          type: string
          example: "夏コミの交通費をお願いします。"
        remarks:
          type: string
          example: "〇〇駅から〇〇駅への移動"
        ammount:
          type: integer   
          example: 1200
        bought_at:
          type: string
          format: "date-time"
          example: "2019/07/28 22:00:00"
        updated_at:
          type: string
          format: "date-time"
          example: "2019/07/28 22:00:00"
    PostApplication:
      type: object
      properties:
        details:
          type: object
          properties:
            type:
              type: string
              example: "Public"
            title:
              type: string
              example: "夏コミの交通費をお願いします。"
            remarks:
              type: string
              example: "〇〇駅から〇〇駅への移動"
            bought_at:
              type: string
              format: "date-time"
              example: "2019/07/28 22:00:00"
            ammount:
              type: integer   
              example: 1200
            paid_to_id:
              type: array
              items: 
                type: string
                example: "nagatech"
        image:
          type: array
          items: 
            type: string
            format: binary
    User:
      type: object
      properties:
        trap_id:
          type: string
          example: "nagatech"
        display_name:
          type: string
          example: "ながてち"
    Comment:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        comment_id:
          type: integer
          description: コメント変更削除に対応するため
        comment:
          type: string
          example: "コメント内容"
        created_at:
          type: string
          format: "date-time"
          example: "2019/07/28 22:00:00"
    State:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/User"
        to_state:
          description: 申請済み(applied) ,却下(rejected),要修正(fix_required),許可済み(permitted),全員に返金済み(fully_paid)
          type: string
          example: "rejected"
        reason:
          type: string
          default: null
          example: "これは雑すぎますね。"
        created_at:
          type: string
          format: "date-time"
          example: "2019/07/28 22:00:00"
    Paid:
      type: object
      properties:
        paid_by_user:
          $ref: "#/components/schemas/User"
        paid_to_user:
          $ref: "#/components/schemas/User"
        paid_at:
          type: string
          format: date-time
  securitySchemes:
    application:
      type: oauth2
      flows:
        clientCredentials:
          tokenUrl: 'http://example.com/oauth/token'
          scopes:
            write: allows modifying resources
            read: allows reading resources
            
